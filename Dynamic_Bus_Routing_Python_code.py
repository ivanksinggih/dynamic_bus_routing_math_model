# -*- coding: utf-8 -*-
"""Dynamic_Bus_Routing_Python_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PgWaULBufr-U5E_8w_IoM1DI-vCsuHQ

1. **Install Gurobi**
"""

!pip install gurobipy
import gurobipy as gp
from gurobipy import GRB
import pandas as pd
import matplotlib.pyplot as plt

"""2. **Read Parameters**"""

print("--------------------------------------Parameter 2 Variable---------------------------------")

# Template for reading a two-dimensional data
parameter_a = pd.read_excel('parameter_a.xlsx', index_col=0).values.tolist()
# Removing first row and column from parameter_a
[a.pop(0) for a in parameter_a]
parameter_a.pop(0)
print("parameter_a:")
for row in parameter_a:
  print(row)

print("-------")

# Template for reading a two-dimensional data
parameter_t = pd.read_excel('parameter_t.xlsx', index_col=0).values.tolist()
# Removing first row and column from parameter_a
[t.pop(0) for t in parameter_t]
parameter_t.pop(0)
print("parameter_t:")
for row in parameter_t:
  print(row)


print("--------------------------------------Parameter 1 Variable---------------------------------")

parameter_d = pd.read_excel('parameter_d.xlsx').values.tolist()[0]

print("parameter_d")
print (parameter_d)

print("-------")

parameter_o = pd.read_excel('parameter_o.xlsx').values.tolist()[0]

print("parameter_o")
print (parameter_o)

print("-------")

parameter_f = pd.read_excel('parameter_f.xlsx').values.tolist()[0]

print("parameter_f")
print (parameter_f)

print("-------")

parameter_g = pd.read_excel('parameter_g.xlsx').values.tolist()[0]

print("parameter_g")
print (parameter_g)

print("-------")

parameter_q = pd.read_excel('parameter_q.xlsx').values.tolist()[0]

print("parameter_q")
print (parameter_q)

print("-------")

parameter_c = pd.read_excel('parameter_c.xlsx').values.tolist()[0]
parameter_c=parameter_c[0]
print("parameter_c")
print (parameter_c)

print("-------")

parameter_e = pd.read_excel('parameter_e.xlsx').values.tolist()[0]
parameter_e = parameter_e[0]
print("parameter_e")
print (parameter_e)

"""3. **Define Sets**"""

# Define sets
print(parameter_a[0])

K = variable_indices_sequence_index = [*range(1,len(parameter_a[0])+1)] #Routes
N = list(range(1,len(parameter_a)+1))  # 1, 2, 3]  # Stations (without depot 0)
N_with_depot = [0] + N.copy()
P = list(range(1,len(parameter_o)+1))
#P = [1, 2]  # Passenger groups


print(K)
print(N)
print("N_with_depot = ", N_with_depot)
print(P)
'''
# Define parameters
aik = {(i, k): 1 for i in N for k in K}  # All stations traveled in old routes
c = 10  # Capacity of each bus
dp = {1: 3, 2: 2}  # Designated stations of passenger groups
e = 0.1  # Allowed travel time increase percentage
fk = {1: 1, 2: 3}  # Fleet size for each route
gk = {1: 20, 2: 35}  # Total travel time of the old routes
op = {1: 1, 2: 2}  # Origin stations of passenger groups
qp = {1: 20, 2: 10}  # Number of passengers in each group
tij = {(0, 1): 8, (1, 0): 8, (0, 2): 10, (2, 0): 10, (0, 3): 10, (3, 0): 10,
       (1, 2): 11, (2, 1): 11, (1, 3): 7, (3, 1): 7, (2, 3): 7, (3, 2): 7}  # Travel times between stations
'''

"""4. **Model, Decision Variable, Set Objective**

5. **Define the Constraints**
"""

# Create Gurobi model
model = gp.Model("Bus_Routing")

# Define decision variables
vik = model.addVars(N, K, vtype=GRB.BINARY, name="vik")
wik = model.addVars(N_with_depot, K, vtype=GRB.BINARY, name="wik")
xijk = model.addVars(N_with_depot, N_with_depot, K, vtype=GRB.BINARY, name="xijk")
ypk = model.addVars(P, K, vtype=GRB.BINARY, name="ypk")
zik = model.addVars(N, K, vtype=GRB.INTEGER, name="zik")

print(vik)
print(wik)
print(xijk)
print(ypk)
print(zik)

# Objective function: Maximize the sum of vik
model.setObjective(gp.quicksum(vik[i, k] for i in N for k in K), GRB.MAXIMIZE) #Constraint model 1

"""5. **Check The Model Print the Result**"""

# Constraints
# Constraint Model 2-3 untuk start dan end nya di depot
for k in K:
    model.addConstr(gp.quicksum(xijk[0, j, k] for j in N_with_depot) == 1)
    model.addConstr(gp.quicksum(xijk[i, 0, k] for i in N_with_depot) == 1)

#Constraint Model 4 untuk guarantee the flow conservation for each route k
for i in N:
  for k in K:
    model.addConstr(gp.quicksum(xijk[j, i, k] for j in N_with_depot) == gp.quicksum(xijk[i, j, k] for j in N_with_depot))

'''
#Constraint Model 4 untuk guarantee the flow conservation for each route k
for i in N_with_depot:
  for k in K:
    model.addConstr(gp.quicksum(xijk[i, j, k] for j in N_with_depot) == 1)

#Constraint Model 5 untuk guarantee the flow conservation for each route k
for j in N_with_depot:
  for k in K:
    model.addConstr(gp.quicksum(xijk[i, j, k] for i in N_with_depot) == 1)
'''

#Constraint Model 6 sub tour elimintation---infeasible?
for i in N:
  for j in N:
    for k in K:
      model.addConstr(zik[j, k] >= zik[i, k] + 1 - len(N) * (1-xijk[i, j, k]))

#Constraint Model 7 sub tour elimintation---infeasible?
for i in N:
  for k in K:
    model.addConstr(zik[i, k] <= len(N)-1)

#Constraint Model 8 Passanger to be assigned to route k if route k passes through the origin and designed stations of passenger p. Constraints
for i in N:
  for k in K:
    model.addConstr(wik[i, k] <= gp.quicksum(xijk[i, j, k] for j in N_with_depot)) #for j in N

#Constraint Model 9 Passanger to be assigned to route k if route k passes through the origin and designed stations of passenger p. Constraints
for i in N:
  for j in N_with_depot:
    for k in K:
      model.addConstr(xijk[i, j, k] <= wik[i, k])

#Constraint Model 10 allow each passenger p to be assigned to route k if route k passes through the origin and designed stations of passenger p.
for k in K:
  for p in P:
    model.addConstr(wik[parameter_o[p-1], k] + wik[parameter_d[p-1], k] >= 2 * ypk[p, k])

#Constraint Model 11 ensure each passenger p is served by a route.
for p in P:
  model.addConstr(gp.quicksum(ypk[p, k] for k in K) == 1)

#Constraint Model 12 limit the total number of passengers assigned to route k to be less than the total available capacity in the fleet of route k.----infeasible
for k in K:
   model.addConstr(parameter_c * parameter_f[k-1] >= gp.quicksum(ypk[p, k] * parameter_q[p-1] for p in P))

#Constraint Model 13 ensure the increase in total travel time of each route k to be less than e percent of its old total travel time.
for k in K:
  model.addConstr(gp.quicksum(xijk[i, j, k] * parameter_t[i][j] for i in N_with_depot for j in N_with_depot if i != j) - parameter_g[k-1] <= parameter_g[k-1] * parameter_e)

#Constraint Model 14 and 15 calculate the similarity indices between the old and new versions of routes.
for i in N:
  for k in K:
    model.addConstr(vik[i, k] <= parameter_a[i-1][k-1] )
    model.addConstr(vik[i, k] <= wik[i, k])

'''
#Constraint Model 16 untuk guarantee the flow conservation for each route k
for i in N:
  for k in K:
    model.addConstr(xijk[i, i, k]  == 0)
'''

model.write("model.lp")

# Optimize the model
model.optimize()

import time
GUROBI_timelimit = 15*60  # in seconds
start_time = time.time()
model.reset(0)  # Reset model: remove any solutions from previous runs
model.setParam(GRB.Param.TimeLimit, GUROBI_timelimit)
model.setParam(GRB.Param.Presolve, True)
model.optimize()
end_time = time.time()

# Print results
print("Objective value = ", model.ObjVal)

for v in model.getVars():
  if v.x > 0:  # Print values that are larger than 0
    print('%s: %g' % (v.varName, v.x))
print("Computational time (CPU time) = ", end_time - start_time, "seconds")
print("-----------------------------------------------------")